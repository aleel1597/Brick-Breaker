
module  block (input         Reset, 
                             frame_clk,          // The clock indicating a new frame (~60Hz)
					input  [7:0]  key,
               output [9:0]  BlockX, BlockY, BlockW, BlockH // Block coordinates and size
              );
    
    logic [9:0] Block_X_Pos, Block_X_Motion, Block_Y_Pos, Block_Y_Motion;
    logic [9:0] Block_X_Pos_in, Block_X_Motion_in, Block_Y_Pos_in, Block_Y_Motion_in;
     
    parameter [9:0] Block_X_Center=320;  // Center position on the X axis
    parameter [9:0] Block_Y_Center=400;  // Center position on the Y axis
    parameter [9:0] Block_X_Min=0;       // Leftmost point on the X axis
    parameter [9:0] Block_X_Max=639;     // Rightmost point on the X axis
    parameter [9:0] Block_Y_Min=0;       // Topmost point on the Y axis
    parameter [9:0] Block_Y_Max=479;     // Bottommost point on the Y axis
    parameter [9:0] Block_X_Step=3;      // Step size on the X axis
    parameter [9:0] Block_Y_Step=3;      // Step size on the Y axis
    parameter [9:0] Block_Width=10;        // Block size
    parameter [9:0] Block_Height=5;        // Block size
    
	 
    assign BlockX = Block_X_Pos;
    assign BlockY = Block_Y_Pos;
    assign BlockW = Block_Width;
    assign BlockH = Block_Height;
    
	 
	 logic flag;
	 
    always_ff @ (posedge frame_clk or posedge Reset)
    begin
        if (Reset) // reset
        begin
            Block_X_Pos <= Block_X_Center;
            Block_Y_Pos <= Block_Y_Center;
            Block_X_Motion <= 10'd0;
            Block_Y_Motion <= 10'd0;
        end
        else 
        begin
		  

		case(key)
			
			default: // keep moving
				begin
            Block_X_Pos <= Block_X_Pos_in;
            Block_Y_Pos <= Block_Y_Pos_in;
            Block_X_Motion <= 10'd0;
            Block_Y_Motion <= 10'd0;
				end
			

			8'h04: //A
				if(flag == 0)
				begin
				   Block_X_Pos <= Block_X_Pos_in;
					Block_Y_Pos <= Block_Y_Pos_in;
					Block_Y_Motion <= 10'd0;
					Block_X_Motion <= (~(Block_X_Step) + 1'b1);
				end
			8'h07: //D
				if(flag == 0)
				begin
				   Block_X_Pos <= Block_X_Pos_in;
					Block_Y_Pos <= Block_Y_Pos_in;
					Block_Y_Motion <= 10'd0;
					Block_X_Motion <= Block_X_Step;
				end
			
			endcase
        end
    end
    
    always_comb
    begin
        // By default, keep motion unchanged
        Block_X_Motion_in = 10'd0;
        Block_Y_Motion_in = 10'd0;
        
        // Be careful when using comparators with "logic" datatype becuase compiler treats 
        //   both sides of the operator UNSIGNED numbers. (unless with further type casting)
        // e.g. Block_Y_Pos - Block_Size <= Block_Y_Min 
        // If Block_Y_Pos is 0, then Block_Y_Pos - Block_Size will not be -4, but rather a large positive number.
		  
		  	
		  
		  
		  if ( Block_X_Pos + Block_Size >= Block_X_Max )  // Block is at the side edge, BOUNCE!
			begin
            Block_X_Motion_in = 10'd0;		// 2's complement.  
								flag = 1;

			end
		  else if (Block_X_Pos <= Block_X_Min + Block_Size )  // Block is at the top edge, BOUNCE!
			begin
            Block_X_Motion_in = 10'd0;;
								flag = 1;

			end
			

        
        // Update the Block's position with its motion
        Block_X_Pos_in = Block_X_Pos + Block_X_Motion;
        Block_Y_Pos_in = Block_Y_Pos + Block_Y_Motion;

    end
    
endmodule


